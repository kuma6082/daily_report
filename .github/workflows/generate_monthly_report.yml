name: Generate Monthly Report

on:
  workflow_dispatch:
    inputs:
      target_month:
        description: '対象の月 (now: 今月, last: 先月)'
        required: true
        default: 'last'
      save_location:
        description: '保存先 (github)'
        required: true
        default: 'github'

jobs:
  generate_report:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: 実行対象の年月を決定
        run: |
          set -e
          if [ "${{ github.event.inputs.target_month }}" == "now" ]; then
            YEAR=$(date +'%Y') || { echo "ERROR: Failed to get current year"; exit 1; }
            MONTH=$(date +'%m') || { echo "ERROR: Failed to get current month"; exit 1; }
          else
            YEAR=$(date --date="last month" +'%Y') || { echo "ERROR: Failed to get last year"; exit 1; }
            MONTH=$(date --date="last month" +'%m') || { echo "ERROR: Failed to get last month"; exit 1; }
          fi

          echo "YEAR=$YEAR" >> $GITHUB_ENV
          echo "MONTH=$MONTH" >> $GITHUB_ENV
          echo "Target year: $YEAR, month: $MONTH"

      - name: Markdownファイルを結合（各ファイルの LAST_COMMIT_MSG を追加）
        run: |
          REPORT_DIR="$YEAR/$MONTH"
          MERGED_DIR="merged"
          OUTPUT_FILE="${MERGED_DIR}/${YEAR}-${MONTH}-merged.md"

          echo "Looking for files in: $REPORT_DIR"

          if [ ! -d "$REPORT_DIR" ]; then
            echo "Directory $REPORT_DIR does not exist. Skipping merge."
            exit 0
          fi

          mkdir -p "$MERGED_DIR"
          echo -e "# Merged Daily Reports for $YEAR-$MONTH\n\n" > "$OUTPUT_FILE"

          shopt -s nullglob
          for file in "$REPORT_DIR"/*.md; do
            LAST_COMMIT_MSG=$(git log -1 --pretty=%B -- "$file")
            CONTENT=$(cat "$file")
            echo -e "## $(basename \"$file\")\n" >> "$OUTPUT_FILE"
            echo -e "**Last Commit Message:** $LAST_COMMIT_MSG\n" >> "$OUTPUT_FILE"
            echo -e "$CONTENT\n\n" >> "$OUTPUT_FILE"
          done

      - name: Gemini API を使って月報を生成
        run: |
          set -e
          mkdir -p report
          MERGED_FILE="merged/${YEAR}-${MONTH}-merged.md"
          TEMPLATE_FILE="monthly_report_template.md"

          if [ ! -f "$MERGED_FILE" ]; then
            echo "ERROR: $MERGED_FILE does not exist. Skipping report generation."
            exit 0
          fi

          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "ERROR: Template file $TEMPLATE_FILE does not exist. Using default format."
            TEMPLATE_CONTENT="## ${YEAR}年${MONTH}月の月報\n\n### 今月の振り返り\n\n### 達成したこと\n\n### 課題と改善点\n\n### 来月の目標"
          else
            TEMPLATE_CONTENT=$(cat "$TEMPLATE_FILE")
          fi

          # Gemini API 用のプロンプト作成
          PROMPT="以下のフォーマットに沿って、Markdown ファイルの内容を要約して月報を作成してください。\n\n---\nテンプレート:\n${TEMPLATE_CONTENT}\n---\n\n対象の内容:\n$(cat "$MERGED_FILE")"

          # Gemini API で月報を生成
          jq -Rn --arg text "$PROMPT" '{contents:[{parts:[{text:$text}]}]}' > payload.json
          SUMMARY=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json | jq -r '.candidates[0].content.parts[0].text // empty')

          if [ -z "$SUMMARY" ]; then
            echo "ERROR: Failed to generate summary from Gemini API."
            exit 1
          fi

          echo "$SUMMARY" > report/report_summary.txt

      - name: GitHub に保存
        run: |
          set -e
          REPORT_FILE="report/${YEAR}-${MONTH}-report.md"
          echo -e "# ${YEAR}年${MONTH}月の月報\n\n$(cat report/report_summary.txt)" > "$REPORT_FILE"
          MERGED_FILE="merged/${YEAR}-${MONTH}-merged.md"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git add "$REPORT_FILE" "$MERGED_FILE"
          git diff --cached --quiet || git commit -m "${YEAR}年${MONTH}月の月報を追加"
          git push origin main
