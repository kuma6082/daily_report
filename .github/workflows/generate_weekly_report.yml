# .github/workflows/generate_weekly_report.yml

name: Generate Weekly Report

# 手動実行のみ (cron は不要)
on:
  workflow_dispatch:
    inputs:
      week_start:
        description: '週の開始曜日を選択してください (例: monday, tuesday, …)'
        required: true
        default: 'monday'
      target:
        description: 'どの週を生成するか (last_week / this_week)'
        required: true
        default: 'last_week'

# GitHub Actions がコミット & プッシュするための権限
permissions:
  contents: write

jobs:
  build-weekly-report:
    runs-on: ubuntu-latest

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. 週の範囲 (START_DATE, END_DATE) を計算する
      - name: Calculate week range
        id: date_calc
        run: |
          WEEK_START="${{ github.event.inputs.week_start }}"  # monday, tuesday, …
          TARGET="${{ github.event.inputs.target }}"          # last_week or this_week

          if [ "$TARGET" = "last_week" ]; then
            END_DATE=$(date -d "last $WEEK_START" +'%Y/%m/%d')
          else
            END_DATE=$(date -d "this $WEEK_START" +'%Y/%m/%d')
          fi

          START_DATE=$(date -d "$END_DATE - 6 days" +'%Y/%m/%d')

          echo "START_DATE=$START_DATE" >> $GITHUB_OUTPUT
          echo "END_DATE=$END_DATE" >> $GITHUB_OUTPUT

      # 3. merged フォルダを作成 (マージした中間ファイル置き場)
      - name: Create merged directory
        run: |
          mkdir -p merged

      # 4. 日報ファイルをマージする
      - name: Merge daily reports
        id: merge
        run: |
          START="${{ steps.date_calc.outputs.START_DATE }}"
          END="${{ steps.date_calc.outputs.END_DATE }}"

          SFMT_START=$(echo "$START" | sed 's/\//-/g')
          SFMT_END=$(echo "$END" | sed 's/\//-/g')

          MERGED_FILE="merged/weekly_${SFMT_START}_to_${SFMT_END}.md"
          echo "" > "$MERGED_FILE"

          CUR="$START"
          COUNT=0

          while [ "$(date -d "$CUR" +'%Y/%m/%d')" != "$(date -d "$END + 1 day" +'%Y/%m/%d')" ]; do
            Y=$(date -d "$CUR" +'%Y')
            M=$(date -d "$CUR" +'%m')
            D=$(date -d "$CUR" +'%d')
            PATH_DAILY="${Y}/${M}/${D}.md"

            if [ -f "$PATH_DAILY" ]; then
              echo -e "\n\n---\n# ${Y}/${M}/${D}\n" >> "$MERGED_FILE"
              cat "$PATH_DAILY" >> "$MERGED_FILE"
              COUNT=$((COUNT + 1))
            fi

            CUR=$(date -d "$CUR + 1 day" +'%Y/%m/%d')
          done

          if [ "$COUNT" -eq 0 ]; then
            echo "Error: No daily reports found between $START and $END" >&2
            exit 1
          fi

          echo "Merged $COUNT daily report(s) into $MERGED_FILE"
          echo "MERGED_FILE=$MERGED_FILE" >> $GITHUB_OUTPUT

      # 5. プロンプト文字列を生成 (テンプレート＋マージ済み日報を組み合わせ)
      - name: Build prompt for Gemini
        id: build_prompt
        run: |
          START="${{ steps.date_calc.outputs.START_DATE }}"
          END="${{ steps.date_calc.outputs.END_DATE }}"
          MERGED_FILE="${{ steps.merge.outputs.MERGED_FILE }}"

          # テンプレートとマージ済み日報をそれぞれ取得
          TEMPLATE_CONTENT=$(<weekly_report_template.md)
          MERGED_CONTENT=$(<"$MERGED_FILE")

          # 月報ワークフローと同様のフォーマットでプロンプトを組み立てる
          PROMPT="以下のフォーマットに沿って、Markdown ファイルの内容を要約して週報を作成してください\n\n---\n\nテンプレート:\n${TEMPLATE_CONTENT}\n\n---\n\n対象の内容:\n${MERGED_CONTENT}"

          # 改行を \n にエスケープして $GITHUB_OUTPUT に保存
          ESCAPED_PROMPT=$(printf '%s' "$PROMPT" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "PROMPT=$ESCAPED_PROMPT" >> $GITHUB_OUTPUT

      # 6. Gemini API を呼び出して週報を生成 (月報ワークフローと同じ方式)
      - name: Call Gemini API for weekly report
        id: ai
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # GitHub Actions の出力からエスケープされたプロンプトを取得
          ESCAPED_PROMPT="${{ steps.build_prompt.outputs.PROMPT }}"

          # もう一度改行コードを戻す必要はなく、JSON の一行文字列として埋め込む
          RESPONSE=$(curl --fail -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta2/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{
              "contents": [{
                "parts": [{ "text": "'"$ESCAPED_PROMPT"'" }]
              }]
            }' \
            | jq -r '.candidates[0].content.parts[0].text')

          if [ -z "$RESPONSE" ]; then
            echo "ERROR: Failed to generate weekly report from Gemini API." >&2
            exit 1
          fi

          # 生成結果を $GITHUB_OUTPUT に保存
          echo "GENERATED_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 7. 週報ファイルを作成して書き込む
      - name: Create weekly report file
        id: write
        run: |
          mkdir -p weekly_report

          SFMT_START=$(echo "${{ steps.date_calc.outputs.START_DATE }}" | sed 's/\//-/g')
          SFMT_END=$(echo "${{ steps.date_calc.outputs.END_DATE }}" | sed 's/\//-/g')

          WEEKLY_FILE="weekly_report/${SFMT_START}to${SFMT_END}.md"
          echo "${{ steps.ai.outputs.GENERATED_CONTENT }}" > "$WEEKLY_FILE"
          echo "WEEKLY_FILE=$WEEKLY_FILE" >> $GITHUB_OUTPUT

      # 8. git コミット & プッシュ
      - name: Commit and push weekly report
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          SFMT_START=$(echo "${{ steps.date_calc.outputs.START_DATE }}" | sed 's/\//-/g')
          SFMT_END=$(echo "${{ steps.date_calc.outputs.END_DATE }}" | sed 's/\//-/g')
          FILE_PATH="weekly_report/${SFMT_START}to${SFMT_END}.md"

          git add "$FILE_PATH"
          git diff --cached --quiet || git commit -m "Add weekly report: ${START} to ${END}"
          git push origin main
